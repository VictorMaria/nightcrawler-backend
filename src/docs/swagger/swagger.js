// eslint-disable-next-line import/named
import { API_URL } from '../../config/constants';
import { createSuccess } from './definitions/successResponse';
import {
  badRequest, notAuthorized, accessForbidden, notFound, conflict,
  serverError
} from './definitions/errorResponse';
import { SigninCreate, Signin } from './definitions/auth';
import { userCreate, updateRoleReq, updateRoleRes } from './definitions/user';
import { permissionsRes } from './definitions/permissions';
import { updateRolePermissionsReq, rolesRes, updateRolePermissionsRes } from './definitions/roles';
import { signInPath } from './paths/auth';
import { userRolePath, createUser } from './paths/users';
import { permissionsPath } from './paths/permissions';
import { rolesPath, rolePermissionsPath } from './paths/roles';

const swaggerDocument = {
  swagger: '2.0',
  info: {
    version: '1.0.0',
    title: 'Barefoot Nomad API',
    description: 'API Documentation for Barefoot Nomad.',
    header: 'none'
  },
  host: API_URL,
  basePath: '/api/v1/',
  produces: ['application/json'],
  consumes: ['application/json'],
  schemes: ['https', 'http'],
  securityDefinitions: {
    BearerToken: {
      description: `
        All protected routes must be accessed with a Bearer Token.
        The JWT Token is generated by the API upon user login.`,
      type: 'apiKey',
      name: 'Authorization',
      in: 'header'
    },
  },
  tags: [
    {
      name: 'auth',
      description: 'Everything about authentication'
    },
    {
      name: 'users',
      description: 'User related actions'
    },
    {
      name: 'permissions',
      description: 'Everything about permissions'
    },
    {
      name: 'roles',
      description: 'Everything about roles'
    }
  ],
  paths: {
    '/auth/signin': signInPath,
    '/users': createUser,
    '/users/roles/{roleId}': userRolePath,
    '/permissions': permissionsPath,
    '/roles': rolesPath,
    '/roles/{roleId}/permissions': rolePermissionsPath, // includes all CRUD verbs (get, patch)
  },
  definitions: {
    SigninCreate, // signin request
    Signin, // signin response
    userCreate, // create user
    createSuccess, // 201
    updateRoleReq,
    updateRoleRes,
    permissionsRes,
    updateRolePermissionsReq,
    updateRolePermissionsRes,
    rolesRes,
    badRequest, // 400
    notAuthorized, // 401
    accessForbidden, // 403
    notFound, // 404
    conflict, // 409
    serverError // 503
  }
};

export default swaggerDocument;
